{"version":3,"sources":["intersection-observer.js"],"names":["heroSection","sections","viewportHeight","window","innerHeight","triggerHeight","navBar","document","getElementById","createObserver","observer","options","root","rootMargin","threshold","buildThresholdList","IntersectionObserver","handleIntersect","observe","forEach","section","thresholds","i","ratio","push","entries","entry","isIntersecting","boundingClientRect","y","target","classList","add","toggleStickyNav","activeLink","remove","contains","querySelectorAll","link","linkHref","getAttribute","idSearch","slice","length","addEventListener","event"],"mappings":";AAAA,IAEIA,EACAC,EAHAC,EAAiBC,OAAOC,YACxBC,EAAgBH,EAAiB,EAGjCI,EAASC,SAASC,eAAe,OAYrC,SAASC,IACP,IAAIC,EAEAC,EAAU,CACZC,KAAM,KACNC,WAAY,MACZC,UAAWC,MAGbL,EAAW,IAAIM,qBAAqBC,EAAiBN,IAC5CO,QAAQlB,GACjBC,EAASkB,QAAQ,SAACC,GAChBV,EAASQ,QAAQE,KAIrB,SAASL,IAIP,IAHA,IAAIM,EAAa,GAGRC,EAAI,EAAKA,GAFH,EAEkBA,IAAK,CACpC,IAAIC,EAAQD,EAHC,EAIbD,EAAWG,KAAKD,GAIlB,OADAF,EAAWG,KAAK,GACTH,EAGT,SAASJ,EAAgBQ,EAASf,GAChCe,EAAQN,QAAQ,SAACO,GACXA,EAAMC,gBAAkBD,EAAME,mBAAmBC,EAAI,GACvDH,EAAMI,OAAOC,UAAUC,IAAI,kBAC3BC,IACAC,KAGAR,EAAMI,OAAOC,UAAUI,OAAO,oBAKpC,SAASF,IACFjC,EAAY+B,UAAUK,SAAS,kBAGlC9B,EAAOyB,UAAUI,OAAO,aAFxB7B,EAAOyB,UAAUC,IAAI,aAMzB,SAASE,IACU3B,SAAS8B,iBAAiB,aAClClB,QAAQ,SAACmB,GAChB,IAAIC,EAAWD,EAAKE,aAAa,QAC7BC,EAAWF,EAASG,MAAM,EAAGH,EAASI,QAC5BpC,SAASC,eAAkBiC,GAAAA,OAAAA,IAC7BV,UAAUK,SAAS,kBAC7BE,EAAKP,UAAUC,IAAI,eAEnBM,EAAKP,UAAUI,OAAO,iBAtE5BhC,OAAOyC,iBACL,OACA,SAACC,GACC7C,EAAcO,SAASC,eAAe,OACtCP,EAAWM,SAAS8B,iBAAiB,WAErC5B,MAEF","file":"intersection-observer.9775b819.js","sourceRoot":"..\\src","sourcesContent":["let viewportHeight = window.innerHeight\r\nlet triggerHeight = viewportHeight / 4\r\nlet heroSection\r\nlet sections\r\nlet navBar = document.getElementById(\"nav\")\r\nwindow.addEventListener(\r\n  \"load\",\r\n  (event) => {\r\n    heroSection = document.getElementById(\"top\")\r\n    sections = document.querySelectorAll(\"section\")\r\n\r\n    createObserver()\r\n  },\r\n  false\r\n)\r\n\r\nfunction createObserver() {\r\n  let observer\r\n\r\n  let options = {\r\n    root: null,\r\n    rootMargin: \"0px\",\r\n    threshold: buildThresholdList(),\r\n  }\r\n\r\n  observer = new IntersectionObserver(handleIntersect, options)\r\n  observer.observe(heroSection)\r\n  sections.forEach((section) => {\r\n    observer.observe(section)\r\n  })\r\n}\r\n\r\nfunction buildThresholdList() {\r\n  let thresholds = []\r\n  let numSteps = 5\r\n\r\n  for (let i = 1.0; i <= numSteps; i++) {\r\n    let ratio = i / numSteps\r\n    thresholds.push(ratio)\r\n  }\r\n\r\n  thresholds.push(0)\r\n  return thresholds\r\n}\r\n\r\nfunction handleIntersect(entries, observer) {\r\n  entries.forEach((entry) => {\r\n    if (entry.isIntersecting && entry.boundingClientRect.y < 0) {\r\n      entry.target.classList.add(\"active-section\")\r\n      toggleStickyNav()\r\n      activeLink()\r\n      // lastActive()\r\n    } else {\r\n      entry.target.classList.remove(\"active-section\")\r\n    }\r\n  })\r\n}\r\n\r\nfunction toggleStickyNav() {\r\n  if (!heroSection.classList.contains(\"active-section\")) {\r\n    navBar.classList.add(\"fixed-nav\")\r\n  } else {\r\n    navBar.classList.remove(\"fixed-nav\")\r\n  }\r\n}\r\n\r\nfunction activeLink() {\r\n  const navLinks = document.querySelectorAll(\".nav-link\")\r\n  navLinks.forEach((link) => {\r\n    let linkHref = link.getAttribute(\"href\")\r\n    let idSearch = linkHref.slice(1, linkHref.length)\r\n    let section = document.getElementById(`${idSearch}`)\r\n    if (section.classList.contains(\"active-section\")) {\r\n      link.classList.add(\"active-link\")\r\n    } else {\r\n      link.classList.remove(\"active-link\")\r\n    }\r\n  })\r\n}\r\n\r\n// function lastActive() {\r\n//   const actives = document.querySelectorAll(\".active-section\")\r\n//   const activesArray = Array.prototype.slice.call(actives)\r\n//   console.log(activesArray)\r\n// }\r\n"]}